# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/graphic/graphic_2d/graphic_config.gni")
import("//third_party/flutter/flutter_config.gni")

rosen_modules_root = "//foundation/graphic/graphic_2d/rosen/modules"

config("thirdparty_lib_txt_config") {
  cflags_cc = [
    "-Wno-implicit-fallthrough",
    "-fvisibility-inlines-hidden",
  ]
}

if (defined(use_new_skia) && use_new_skia) {
  txt_root = "$flutter_root/txt"
} else {
  txt_root = "$flutter_root/engine/flutter/third_party/txt"
}

template("thirdparty_lib_txt") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    part_name = flutter_part
    subsystem_name = flutter_subsystem
    defines += invoker.defines
    cflags_cc += invoker.cflags_cc

    configs = [
      "$ace_flutter_engine_root/icu:icu_config_$platform",
      "$ace_flutter_engine_root:flutter_config",
      ":thirdparty_lib_txt_config",
    ]
    if (platform == "android") {
      configs += [ "$ace_root/build:reduce_eh_frame_config" ]
    }

    sources = [
      "$txt_root/src/log/log.cc",
      "$txt_root/src/minikin/CmapCoverage.cpp",
      "$txt_root/src/minikin/Emoji.cpp",
      "$txt_root/src/minikin/FontCollection.cpp",
      "$txt_root/src/minikin/FontFamily.cpp",
      "$txt_root/src/minikin/FontLanguage.cpp",
      "$txt_root/src/minikin/FontLanguageListCache.cpp",
      "$txt_root/src/minikin/FontUtils.cpp",
      "$txt_root/src/minikin/GraphemeBreak.cpp",
      "$txt_root/src/minikin/HbFontCache.cpp",
      "$txt_root/src/minikin/Hyphenator.cpp",
      "$txt_root/src/minikin/Layout.cpp",
      "$txt_root/src/minikin/LayoutUtils.cpp",
      "$txt_root/src/minikin/LineBreaker.cpp",
      "$txt_root/src/minikin/Measurement.cpp",
      "$txt_root/src/minikin/MinikinFont.cpp",
      "$txt_root/src/minikin/MinikinInternal.cpp",
      "$txt_root/src/minikin/SparseBitSet.cpp",
      "$txt_root/src/minikin/WordBreaker.cpp",
      "$txt_root/src/txt/asset_font_manager.cc",
      "$txt_root/src/txt/font_asset_provider.cc",
      "$txt_root/src/txt/font_collection.cc",
      "$txt_root/src/txt/font_features.cc",
      "$txt_root/src/txt/font_skia.cc",
      "$txt_root/src/txt/paint_record.cc",
      "$txt_root/src/txt/paragraph_builder.cc",
      "$txt_root/src/txt/paragraph_builder_txt.cc",
      "$txt_root/src/txt/paragraph_style.cc",
      "$txt_root/src/txt/paragraph_txt.cc",
      "$txt_root/src/txt/placeholder_run.cc",
      "$txt_root/src/txt/styled_runs.cc",
      "$txt_root/src/txt/test_font_manager.cc",
      "$txt_root/src/txt/text_decoration.cc",
      "$txt_root/src/txt/text_shadow.cc",
      "$txt_root/src/txt/text_style.cc",
      "$txt_root/src/txt/typeface_font_asset_provider.cc",
      "$txt_root/src/utils/JenkinsHash.cpp",
    ]

    if (ace_enable_gpu) {
      defines += [ "ACE_ENABLE_GPU" ]
    }

    if (defined(use_new_skia) && use_new_skia) {
      deps = [
        "$ace_flutter_engine_root:flutter_engine_fml_$platform",
        "$ace_flutter_engine_root/icu:ace_libicu_$platform",
        "//third_party/skia:skia_$platform",
      ]
      if (is_ios || is_mac) {
        deps += [ "//third_party/skia/third_party/harfbuzz:harfbuzz" ]
      }
      include_dirs = [
        "$flutter_root/txt/src",
        "$rosen_modules_root/2d_engine",
        "$rosen_modules_root/2d_engine/rosen_text",
        "$rosen_modules_root/2d_graphics/include",
        "$rosen_modules_root/2d_graphics/src",
        "$rosen_modules_root/2d_graphics/src/drawing",
        "$rosen_modules_root/2d_graphics/src/drawing/engine_adapter",
        "$rosen_modules_root/render_service_base/include",
        "//third_party/skia/include/private",
        "//third_party/skia/src/core",
        "//third_party/skia/src/ports",
        "//third_party/skia/third_party/externals/harfbuzz/src",
        "//",
      ]
    } else {
      deps = [
        "$ace_flutter_engine_root:flutter_engine_fml_$platform",
        "$ace_flutter_engine_root/icu:ace_libicu_$platform",
        "$ace_flutter_engine_root/skia:ace_skia_$platform",
      ]
    }

    if (platform == "ohos" || platform == "ohos_ng") {
      if (defined(oem_commercial_build) && oem_commercial_build) {
        sources += [ "$txt_root/src/txt/platform_android.cc" ]
      } else {
        sources += [ "$txt_root/src/txt/platform_ohos.cc" ]
      }
    } else if (platform == "windows") {
      sources += [ "$txt_root/src/txt/platform.cc" ]
      if (use_mingw_win) {
        defines += [ "SK_BUILD_FONT_MGR_FOR_PREVIEW_WIN" ]
      }
      if (!defined(use_new_skia) || !use_new_skia) {
        deps +=
            [ "$ace_flutter_engine_root/harfbuzz:ace_libharfbuzz_$platform" ]
      }
    } else if (platform == "mac" || platform == "ios") {
      cflags = [ "-DNS_FORMAT_ARGUMENT(A)=" ]
      sources += [ "$txt_root/src/txt/platform_mac.mm" ]
      if (!defined(use_new_skia) || !use_new_skia) {
        deps +=
            [ "$ace_flutter_engine_root/harfbuzz:ace_libharfbuzz_$platform" ]
      }
      if (use_mac) {
        defines += [ "SK_BUILD_FONT_MGR_FOR_PREVIEW_MAC" ]
        if (defined(enable_gn_2021)) {
          frameworks = [
            # AppKit symbols NSFontWeightXXX may be dlsym'ed.
            "AppKit.framework",
            "ApplicationServices.framework",
            "OpenGL.framework",
          ]
        } else {
          libs = [
            # AppKit symbols NSFontWeightXXX may be dlsym'ed.
            "AppKit.framework",
            "ApplicationServices.framework",
            "OpenGL.framework",
          ]
        }
      }
    } else if (platform == "android") {
      sources += [ "$txt_root/src/txt/platform_android.cc" ]
    } else if (platform == "linux") {
      sources += [ "$txt_root/src/txt/platform_linux.cc" ]
      if (use_linux) {
        defines += [ "SK_BUILD_FONT_MGR_FOR_PREVIEW_LINUX" ]
      }
      if (!defined(use_new_skia) || !use_new_skia) {
        deps +=
            [ "$ace_flutter_engine_root/harfbuzz:ace_libharfbuzz_$platform" ]
      }
    }
  }
}

foreach(item, ace_platforms) {
  thirdparty_lib_txt("thirdparty_lib_txt_" + item.name) {
    platform = item.name
    defines = []
    cflags_cc = []
    config = {
    }

    if (defined(item.config)) {
      config = item.config
    }

    if (defined(config.defines)) {
      defines = config.defines
    }

    if (defined(config.cflags_cc)) {
      cflags_cc = config.cflags_cc
    }
  }
}
